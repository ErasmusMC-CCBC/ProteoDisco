% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/AllMethods.R
\name{setMutantTranscripts}
\alias{setMutantTranscripts}
\alias{setMutantTranscripts,ProteoDiscography-method}
\alias{mutantTranscripts,ProteoDiscography-method}
\title{Adds mutant transcript sequences to the ProteoDiscography in the appropriate slot}
\usage{
setMutantTranscripts(x, transcripts, slotType)

\S4method{setMutantTranscripts}{ProteoDiscography}(x, transcripts, slotType)

\S4method{mutantTranscripts}{ProteoDiscography}(x)
}
\arguments{
\item{x}{(ProteoDiscography): The ProteoDiscography for which the slot will be edited.}

\item{transcripts}{(DataFrame): Transcripts to be used in the slot.}

\item{slotType}{(character): Implemented slot to be edited.}
}
\value{
{ProteoDiscography} with updated records.
}
\description{
Adds mutant transcript sequences to the ProteoDiscography in the appropriate slot
}
\examples{

# From a ProteoDiscography with imported and incorporated records, take only the first 10 records.
# ProteoDisco::setMutantTranscripts(ProteoDiscography.hg19)$genomicVariants[1:10], slotType = 'genomicVariants')
# ProteoDisco::setMutantTranscripts(ProteoDiscography.hg19)$spliceJunctions[1:10], slotType = 'spliceJunctions')
# ProteoDisco::setMutantTranscripts(ProteoDiscography.hg19)$manualSequences[1:10], slotType = 'manualSequences')

# Example using genomic variants
ProteoDiscography.hg19 <- ProteoDisco::generateProteoDiscography(
  TxDb = TxDb.Hsapiens.UCSC.hg19.knownGene::TxDb.Hsapiens.UCSC.hg19.knownGene, 
  genomeSeqs = BSgenome.Hsapiens.UCSC.hg19::BSgenome.Hsapiens.UCSC.hg19
)

# Supply the ProteoDiscography with genomic variants to incorporate in downstream analysis. This can be one or multiple VCF / MAF files.
# Additional manual sequences and exon-exon mapping (i.e., splice junctions) can also be given as shown in the sections below.
ProteoDiscography.hg19 <- ProteoDisco::importGenomicVariants(
  ProteoDiscography = ProteoDiscography.hg19,
  # Provide the VCF / MAF files, if more then one supply a vector of files and corresponding samplenames.
  files = system.file('extdata', 'validationSet_hg19.vcf', package = 'ProteoDisco'), 
  # We can replace the original samples within the VCF with nicer names.
  samplenames = 'Validation Set (GRCh37)',
  # Number of threads used for parallelization.
  # We run samples sequentially and parallelize within (variant-wise multi-threading).
  threads = 1, 
  # To increase import-speed for this example, do not check for validity of the reference anchor with the given reference sequences.
  performAnchorCheck = FALSE
)

ProteoDiscography.hg19 <- ProteoDisco::incorporateGenomicVariants(
  ProteoDiscography = ProteoDiscography.hg19,
  # Do not aggregate samples and generate mutant transcripts from the mutations per sample.
  aggregateSamples = FALSE, 
  # If there are multiple mutations within the same exon (CDS), place them on the same mutant CDS sequence.
  aggregateWithinExon = TRUE, 
  # Aggregate multiple mutant exons (CDS) within the same transcripts instead of incorporating one at a time.
  aggregateWithinTranscript = TRUE, 
  # If there are overlapping mutations on the same coding position, retain only the first of the overlapping mutations.
  # If set to FALSE, throw an error and specify which CDS had overlapping mutations.
  ignoreOverlappingMutations = TRUE, 
  # Number of threads.
  threads = 1
)

# Only keep the first10 records.
ProteoDiscography.hg19 <- ProteoDisco::setMutantTranscripts(
  x = ProteoDiscography.hg19, 
  transcripts = ProteoDisco::mutantTranscripts(ProteoDiscography.hg19)$genomicVariants[1:10,], 
  slotType = 'genomicVariants'
)

}
